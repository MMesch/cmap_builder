{
  "name": "Blender Colormap Builder",
  "tagline": "three blender scripts that allow to design 1d and 2d colormaps within a colorspace gamut",
  "body": "# blender colormap builder\r\n\r\n## Overview\r\nThis is a blender script that allows to generate colormaps in the uniform\r\ncolorspace CAM02-UCS (thank you colorspacious) by drawing a 3d spline path\r\nor a 3d spline surface in blender.\r\n\r\n## Installation\r\n1. clone the git repository somewhere on your system: `git clone ...`\r\n2. install a python version that is compatible with blender (e.g. python 3.5.1 for\r\n   blender 2.77a) and install the\r\n   `colorspacious` module with `pip install colorspacious`.\r\n   This is straightforward with anaconda python: first make a virtual\r\n   environment with `conda create -n blender python=3.5`. \r\n   Then do `source activate blender` to activate the environment and install\r\n   colorspacious with `pip install colorspacious`\r\n\r\n## The `colormap.blend` project file\r\n1. open the project `colormaps.blend` with blender.\r\n2. click on the different layers (little boxes at the bottom right of the 3d\r\n   view windows) and check out the objects that are within each by doing a right\r\n   click on the objects. The layers are organized like this:\r\n * layer 1: contains a precomputed Gamut surface and can be used to position\r\n   a surface or path in the Gamut to compute the colormap\r\n * layer 2: this is the render layer. Computed and colored meshes can be put\r\n   here for advanced visualizations\r\n * layer 3: this is the dump layer for lots of different spline surfaces and\r\n   paths that are ready to be taken to layer 1 for colormap computation\r\n * layer 4: this is the dump layer for modified, and colored non-spline \r\n   surfaces or paths.\r\n\r\n## Instructions, Gamut surface sript\r\n2. in the python script `Add_Gamut` (can be selected on in the footline\r\n   of the text window on the right), change the path to point to your\r\n   colorspacious module. \r\n   E.g.: `sys.path.append('home/myname/anaconda2/envs/blender/lib/python3.5/site-packages'')`\r\n3. run the script with `alt + p` when the text window is active or click\r\n   the `run script` button in the footline of the text editor window.\r\n   A new Gamut surface is generated. You can modify the resolution of the Gamut\r\n   cube in the script.\r\n\r\n## Instructions, path to colormap script\r\n2. in the python script `path_to_colormap` (can be selected on in the footline\r\n   of the text window on the right), change the path to point to your\r\n   colorspacious module. \r\n   E.g.: `sys.path.append('home/myname/anaconda2/envs/blender/lib/python3.5/site-packages'')`\r\n3. you can now add and edit the control points of bezier curves in the 3d window.\r\n   If you are done positioning your curve,\r\n   make sure that it is selected and run the python script by pushing on `run script`\r\n   or pressing `alt + p` when the script window is active. The colormap on\r\n   the bottom left should now update.\r\n\r\n## Instructions, nurbs surface to colormap script\r\n\r\n2. in the python script `nurbs_to_colormap`, change the path to point to your\r\n   colorspacious module. E.g.: `sys.path.append('home/myname/anaconda2/envs/blender/lib/python3.5/site-packages'')`\r\n3. you can now add and edit the control points of nurbs surfaces in the 3d window. \r\n   The u and v resolution parameters\r\n   control the axial and angular sampling of the cylinder and can be reduced\r\n   while editing. The spline order controls the smoothness of the surface.\r\n4. If you are done positioning the surface,\r\n   make sure that it is selected and run the python script by pushing on `run script`\r\n   or pressing `alt + p` when the script window is active. Be careful, the script\r\n   generates a duplicate of the nurbs surface that you can delete after the\r\n   colormap has been generated. The colormap on the bottom left should now update.\r\n   There is a parameter in the script to transpose the colormaps and a commented\r\n   line to save it as a npy file.\r\n\r\n\r\n## Gallery:\r\n![blender interface surface](blender_example2.png)\r\n![blender interface path](blender_example.png)\r\n\r\n\r\n## included colormaps\r\nColorsurfaces need to make a few compromises To use the maximum extend of the\r\nGamut colorspace while at the same time remaining as smooth as possible.\r\nEspecially at convergent points around black (zero lightness) and white (max\r\nlightness), the topology of the color surfaces has to be as smooth as possible,\r\nmeaning the lightness of different hues should vary as little as possible. This\r\nensures that maximum and minimums in displayed functions remain round and don't\r\nbecome star-shaped or shifted towards darker colors like blue and red. At 0.5,\r\nthe color surfaces can vary a in lightness to make use of strongy saturated\r\ncolors.\r\n\r\n### rendering:\r\nWheel2d is a 2d colormap that goes from black to white with maximum saturated\r\ncolors around 0.5.\r\n![wheel2d](wheel2d.png)\r\n\r\nDarkwheel2d is a 2d colormap that goes from black to light and saturated colors.\r\nExclusion of white allows for better coverage of the saturated corners of the\r\nGamut cube.\r\n![darkwheel2d](darkwheel2d.png)\r\n\r\nBrightwheel2d the equivalent of Darkwheel starting from white instead of black.\r\nI have chosen slightly harder transitions between the six colors in this\r\ncolormap.\r\n![brightwheel2d](brightwheel2d.png)\r\n\r\nSmoothwheel2d is the equivalent of wheel2d with even lightness and even \r\nangular variations. The colors are smoother and less saturated but lightness\r\nis much easier to identify because we don't need to adapt lightness to the\r\nhue value ![smoothwheel2d](smoothwheel2d.png)\r\n\r\n### comparison with:\r\n![complex sine](comparison.png)\r\n![poles and zeros function](poles_and_zeros.png)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}